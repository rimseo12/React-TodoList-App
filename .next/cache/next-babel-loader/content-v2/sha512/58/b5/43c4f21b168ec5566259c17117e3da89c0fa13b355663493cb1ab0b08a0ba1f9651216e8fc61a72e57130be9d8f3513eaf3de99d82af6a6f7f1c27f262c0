{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"C:\\\\WebProject\\\\todolist\\\\reducer\\\\TodoContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useReducer, createContext, useContext, useRef } from \"react\";\nvar initialTodos = [{\n  id: 1,\n  text: \"프로젝트 생성하기\",\n  done: true\n}, {\n  id: 2,\n  text: \"컴포넌트 스타일링하기\",\n  done: true\n}, {\n  id: 3,\n  text: \"Context 만들기\",\n  done: false\n}, {\n  id: 4,\n  text: \"기능 구현하기\",\n  done: false\n}];\n\nfunction todoReducer(state, action) {\n  switch (action.type) {\n    case \"CREATE\":\n      return state.concat(action.todo);\n\n    case \"TOGGLE\":\n      return state.map(function (todo) {\n        return todo.id === action.id ? _objectSpread(_objectSpread({}, todo), {}, {\n          done: !todo.done\n        }) : todo;\n      });\n\n    case \"REMOVE\":\n      return state.filter(function (todo) {\n        return todo.id !== action.id;\n      });\n\n    default:\n      throw new Error('Unhandled action type:${action.type}');\n  }\n}\n\nvar TodoStateContext = /*#__PURE__*/createContext();\nvar TodoDispatchContext = /*#__PURE__*/createContext();\nvar TodoNextIdContext = /*#__PURE__*/createContext();\nexport function TodoProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useReducer = useReducer(todoReducer, initialTodos),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var nextId = useRef(5);\n  return /*#__PURE__*/_jsxDEV(TodoStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(TodoDispatchContext.Provider, {\n      value: dispatch,\n      children: /*#__PURE__*/_jsxDEV(TodoNextIdContext.Provider, {\n        value: nextId,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 7\n  }, this);\n}\n\n_s(TodoProvider, \"MLelIZr2z8XWFJ9lCw3UijgeTSM=\");\n\n_c = TodoProvider;\nexport function useTodoState() {\n  _s2();\n\n  var context = useContext(TodoStateContext);\n\n  if (!context) {\n    throw new Error(\"Cannot find TodoProvider\");\n  }\n\n  return context;\n}\n\n_s2(useTodoState, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useTodoDispatch() {\n  _s3();\n\n  var context = useContext(TodoDispatchContext); //useContext를 이용해서 hook을 만듬\n\n  if (!context) {\n    throw new Error(\"Cannot find TodoProvider\");\n  }\n\n  return context;\n}\n\n_s3(useTodoDispatch, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useTodoNextId() {\n  _s4();\n\n  var context = useContext(TodoNextIdContext);\n\n  if (!context) {\n    throw new Error(\"Cannot find TodoProvider\");\n  }\n\n  return context;\n}\n\n_s4(useTodoNextId, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoProvider\");","map":{"version":3,"sources":["C:/WebProject/todolist/reducer/TodoContext.js"],"names":["React","useReducer","createContext","useContext","useRef","initialTodos","id","text","done","todoReducer","state","action","type","concat","todo","map","filter","Error","TodoStateContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","children","dispatch","nextId","useTodoState","context","useTodoDispatch","useTodoNextId"],"mappings":"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","sourcesContent":["import React, { useReducer, createContext, useContext, useRef } from \"react\";\r\n\r\n\r\nconst initialTodos = [\r\n    {\r\n      id: 1,\r\n      text: \"프로젝트 생성하기\",\r\n      done: true\r\n    },\r\n    {\r\n      id: 2,\r\n      text: \"컴포넌트 스타일링하기\",\r\n      done: true\r\n    },\r\n    {\r\n      id: 3,\r\n      text: \"Context 만들기\",\r\n      done: false\r\n    },\r\n    {\r\n      id: 4,\r\n      text: \"기능 구현하기\",\r\n      done: false\r\n    }\r\n  ];\r\n\r\n  function todoReducer(state, action){\r\n    switch(action.type){\r\n        case \"CREATE\":\r\n            return state.concat(action.todo);\r\n        case \"TOGGLE\":\r\n            return state.map(todo =>\r\n                todo.id === action.id? {...todo, done: !todo.done} : todo\r\n                );    \r\n        case \"REMOVE\":\r\n            return state.filter(todo => todo.id !== action.id);\r\n        default:\r\n            throw new Error('Unhandled action type:${action.type}');            \r\n    }\r\n  }\r\n  \r\n  const TodoStateContext = createContext();\r\n  const TodoDispatchContext = createContext();\r\n  const TodoNextIdContext = createContext();\r\n\r\n  export function TodoProvider({ children }) {\r\n    const [state, dispatch] = useReducer(todoReducer, initialTodos);\r\n    const nextId = useRef(5);\r\n  \r\n    return (\r\n      <TodoStateContext.Provider value={state}>\r\n        <TodoDispatchContext.Provider value={dispatch}>\r\n          <TodoNextIdContext.Provider value={nextId}>\r\n            {children}\r\n          </TodoNextIdContext.Provider>\r\n        </TodoDispatchContext.Provider>\r\n      </TodoStateContext.Provider>\r\n    );\r\n  }\r\n  \r\n  export function useTodoState() {\r\n    const context = useContext(TodoStateContext);\r\n    if (!context) {\r\n      throw new Error(\"Cannot find TodoProvider\");\r\n    }\r\n    return context;\r\n  }\r\n  \r\n  export function useTodoDispatch() {\r\n    const context = useContext(TodoDispatchContext); //useContext를 이용해서 hook을 만듬\r\n    if (!context) {\r\n      throw new Error(\"Cannot find TodoProvider\");\r\n    }\r\n    return context;\r\n  }\r\n  \r\n  export function useTodoNextId() {\r\n    const context = useContext(TodoNextIdContext);\r\n    if (!context) {\r\n      throw new Error(\"Cannot find TodoProvider\");\r\n    }\r\n    return context;\r\n  }\r\n  "]},"metadata":{},"sourceType":"module"}