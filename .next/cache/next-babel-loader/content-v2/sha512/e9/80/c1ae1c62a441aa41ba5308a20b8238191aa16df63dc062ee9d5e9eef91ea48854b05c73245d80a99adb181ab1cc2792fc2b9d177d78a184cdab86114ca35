{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\WebProject\\\\todolist\\\\reducer\\\\TodoContext.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useReducer, createContext, useContext, useRef } from 'react';\nconst initialTodos = [{\n  id: 1,\n  text: '프로젝트 생성하기',\n  done: true\n}, {\n  id: 2,\n  text: '컴포넌트 스타일링하기',\n  done: true\n}, {\n  id: 3,\n  text: 'Context 만들기',\n  done: false\n}, {\n  id: 4,\n  text: '기능 구현하기',\n  done: false\n}];\n\nfunction todoReducer(state, action) {\n  switch (action.type) {\n    case 'CREATE':\n      return state.concat(action.todo);\n\n    case 'TOGGLE':\n      return state.map(todo => todo.id === action.id ? _objectSpread(_objectSpread({}, todo), {}, {\n        done: !todo.done\n      }) : todo);\n\n    case 'REMOVE':\n      return state.filter(todo => todo.id !== action.id);\n\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n}\n\nconst TodoStateContext = /*#__PURE__*/createContext();\nconst TodoDispatchContext = /*#__PURE__*/createContext();\nconst TodoNextIdContext = /*#__PURE__*/createContext();\nexport function TodoProvider({\n  children\n}) {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(todoReducer, initialTodos);\n  const nextId = useRef(5);\n  return /*#__PURE__*/_jsxDEV(TodoStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(TodoDispatchContext.Provider, {\n      value: dispatch,\n      children: /*#__PURE__*/_jsxDEV(TodoNextIdContext.Provider, {\n        value: nextId,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\nexport function useTodoState() {\n  const context = useContext(TodoStateContext);\n\n  if (!context) {\n    throw new Error('Cannot find TodoProvider');\n  }\n\n  return context;\n}\nexport function useTodoDispatch() {\n  const context = useContext(TodoDispatchContext);\n\n  if (!context) {\n    throw new Error('Cannot find TodoProvider');\n  }\n\n  return context;\n}\nexport function useTodoNextId() {\n  const context = useContext(TodoNextIdContext);\n\n  if (!context) {\n    throw new Error('Cannot find TodoProvider');\n  }\n\n  return context;\n}","map":{"version":3,"sources":["C:/WebProject/todolist/reducer/TodoContext.js"],"names":["React","useReducer","createContext","useContext","useRef","initialTodos","id","text","done","todoReducer","state","action","type","concat","todo","map","filter","Error","TodoStateContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","children","dispatch","nextId","useTodoState","context","useTodoDispatch","useTodoNextId"],"mappings":"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","sourcesContent":["import React, { useReducer, createContext, useContext, useRef } from 'react';\r\n\r\nconst initialTodos = [\r\n  {\r\n    id: 1,\r\n    text: '프로젝트 생성하기',\r\n    done: true\r\n  },\r\n  {\r\n    id: 2,\r\n    text: '컴포넌트 스타일링하기',\r\n    done: true\r\n  },\r\n  {\r\n    id: 3,\r\n    text: 'Context 만들기',\r\n    done: false\r\n  },\r\n  {\r\n    id: 4,\r\n    text: '기능 구현하기',\r\n    done: false\r\n  }\r\n];\r\n\r\nfunction todoReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'CREATE':\r\n      return state.concat(action.todo);\r\n    case 'TOGGLE':\r\n      return state.map(todo =>\r\n        todo.id === action.id ? { ...todo, done: !todo.done } : todo\r\n      );\r\n    case 'REMOVE':\r\n      return state.filter(todo => todo.id !== action.id);\r\n    default:\r\n      throw new Error(`Unhandled action type: ${action.type}`);\r\n  }\r\n}\r\n\r\nconst TodoStateContext = createContext();\r\nconst TodoDispatchContext = createContext();\r\nconst TodoNextIdContext = createContext();\r\n\r\nexport function TodoProvider({ children }) {\r\n  const [state, dispatch] = useReducer(todoReducer, initialTodos);\r\n  const nextId = useRef(5);\r\n\r\n  return (\r\n    <TodoStateContext.Provider value={state}>\r\n      <TodoDispatchContext.Provider value={dispatch}>\r\n        <TodoNextIdContext.Provider value={nextId}>\r\n          {children}\r\n        </TodoNextIdContext.Provider>\r\n      </TodoDispatchContext.Provider>\r\n    </TodoStateContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useTodoState() {\r\n  const context = useContext(TodoStateContext);\r\n  if (!context) {\r\n    throw new Error('Cannot find TodoProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\nexport function useTodoDispatch() {\r\n  const context = useContext(TodoDispatchContext);\r\n  if (!context) {\r\n    throw new Error('Cannot find TodoProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\nexport function useTodoNextId() {\r\n  const context = useContext(TodoNextIdContext);\r\n  if (!context) {\r\n    throw new Error('Cannot find TodoProvider');\r\n  }\r\n  return context;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}